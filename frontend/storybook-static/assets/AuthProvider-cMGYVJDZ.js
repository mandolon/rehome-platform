import{r as a}from"./index-B2-qRKKC.js";var o={};class u{constructor(){o.NEXT_PUBLIC_USE_API_MOCK==="1"?(this.apiURL=o.NEXT_PUBLIC_API_BASE_URL||"/api/app",this.baseURL=""):(this.apiURL=o.NEXT_PUBLIC_API_URL||"http://localhost:9000/api/app",this.baseURL=this.apiURL.replace("/api/app",""))}async csrf(){try{const t=o.NEXT_PUBLIC_USE_API_MOCK==="1"?"/sanctum/csrf-cookie":`${this.baseURL}/sanctum/csrf-cookie`;await fetch(t,{method:"GET",credentials:"include",headers:{Accept:"application/json"}})}catch(t){throw console.error("CSRF cookie request failed:",t),{message:"Failed to initialize CSRF protection",status:500}}}async request(t,e={}){const c=`${this.apiURL}${t}`,h={credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json",...e.headers},...e};try{const s=await fetch(c,h);let r;const n=s.headers.get("content-type");if(n!=null&&n.includes("application/json")?r=await s.json():r=await s.text(),!s.ok)throw{message:(r==null?void 0:r.message)||`HTTP Error ${s.status}`,status:s.status,errors:(r==null?void 0:r.errors)||void 0};return r}catch(s){throw s instanceof Error?{message:s.message,status:500}:s}}async get(t){return this.request(t,{method:"GET"})}async post(t,e){return this.request(t,{method:"POST",body:e?JSON.stringify(e):void 0})}async put(t,e){return this.request(t,{method:"PUT",body:e?JSON.stringify(e):void 0})}async patch(t,e){return this.request(t,{method:"PATCH",body:e?JSON.stringify(e):void 0})}async delete(t){return this.request(t,{method:"DELETE"})}}new u;const p=a.createContext(void 0);function l(){const i=a.useContext(p);if(i===void 0)throw new Error("useAuth must be used within an AuthProvider");return i}export{l as u};
