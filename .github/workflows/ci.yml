name: CI

on:
  pull_request:
    branches: [main]

jobs:
  backend:
    name: Backend (Laravel)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, intl, pdo_sqlite, sqlite3, dom, fileinfo
          coverage: none
      
      - name: Setup Composer cache
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache/files
          key: composer-${{ runner.os }}-${{ hashFiles('backend/composer.lock') }}
          restore-keys: composer-${{ runner.os }}-

      - name: Install PHP deps (no scripts)
        run: composer install --no-interaction --prefer-dist --no-progress --no-scripts

      - name: Prepare app env
        run: |
          cp .env.example .env
          php -r "file_exists('storage') || mkdir('storage', 0777, true);"
          php -r "file_exists('bootstrap/cache') || mkdir('bootstrap/cache', 0777, true);"
          php artisan key:generate

      - name: Autoload optimize + package discovery
        run: |
          composer dump-autoload -o --no-scripts
          php artisan package:discover

      - name: Configure sqlite memory
        run: |
          sed -i 's/DB_CONNECTION=.*/DB_CONNECTION=sqlite/' .env
          echo "DB_DATABASE=:memory:" >> .env
          php artisan config:clear

      - name: Run migrations
        run: php artisan migrate --no-interaction

      - name: Run tests
        run: php artisan test --colors=always

  frontend:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: ./frontend/pnpm-lock.yaml

      - run: corepack enable
      - run: corepack prepare pnpm@8.15.4 --activate
      - run: pnpm install --frozen-lockfile
        working-directory: ./frontend

      - run: pnpm run -s typecheck
        working-directory: ./frontend
      - run: pnpm run -s lint
        working-directory: ./frontend
      - run: pnpm run -s test -- --run
        working-directory: ./frontend
      - run: pnpm run -s build
        working-directory: ./frontend
      - run: pnpm run -s storybook:ci
        working-directory: ./frontend

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-artifacts
          path: |
            frontend/.gatef_artifacts/*
            frontend/storybook-static/*
            frontend/coverage/*
          if-no-files-found: ignore